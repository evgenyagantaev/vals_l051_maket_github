ARM GAS  /tmp/ccY66mG1.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32l0xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	2
  19              		.global	NMI_Handler
  20              		.code	16
  21              		.thumb_func
  23              	NMI_Handler:
  24              	.LFB36:
  25              		.file 1 "Src/stm32l0xx_it.c"
   1:Src/stm32l0xx_it.c **** /**
   2:Src/stm32l0xx_it.c ****   ******************************************************************************
   3:Src/stm32l0xx_it.c ****   * @file    stm32l0xx_it.c
   4:Src/stm32l0xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32l0xx_it.c ****   ******************************************************************************
   6:Src/stm32l0xx_it.c ****   *
   7:Src/stm32l0xx_it.c ****   * COPYRIGHT(c) 2019 STMicroelectronics
   8:Src/stm32l0xx_it.c ****   *
   9:Src/stm32l0xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32l0xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32l0xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32l0xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32l0xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32l0xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32l0xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32l0xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32l0xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32l0xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32l0xx_it.c ****   *
  20:Src/stm32l0xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32l0xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32l0xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32l0xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32l0xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32l0xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32l0xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32l0xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32l0xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32l0xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32l0xx_it.c ****   *
  31:Src/stm32l0xx_it.c ****   ******************************************************************************
  32:Src/stm32l0xx_it.c ****   */
  33:Src/stm32l0xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccY66mG1.s 			page 2


  34:Src/stm32l0xx_it.c **** #include "stm32l0xx_hal.h"
  35:Src/stm32l0xx_it.c **** #include "stm32l0xx.h"
  36:Src/stm32l0xx_it.c **** #include "stm32l0xx_it.h"
  37:Src/stm32l0xx_it.c **** 
  38:Src/stm32l0xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32l0xx_it.c **** 
  40:Src/stm32l0xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32l0xx_it.c **** 
  42:Src/stm32l0xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32l0xx_it.c **** extern TIM_HandleTypeDef htim2;
  44:Src/stm32l0xx_it.c **** extern TIM_HandleTypeDef htim6;
  45:Src/stm32l0xx_it.c **** extern TIM_HandleTypeDef htim21;
  46:Src/stm32l0xx_it.c **** extern UART_HandleTypeDef huart1;
  47:Src/stm32l0xx_it.c **** 
  48:Src/stm32l0xx_it.c **** /******************************************************************************/
  49:Src/stm32l0xx_it.c **** /*            Cortex-M0+ Processor Interruption and Exception Handlers         */ 
  50:Src/stm32l0xx_it.c **** /******************************************************************************/
  51:Src/stm32l0xx_it.c **** 
  52:Src/stm32l0xx_it.c **** /**
  53:Src/stm32l0xx_it.c **** * @brief This function handles Non maskable interrupt.
  54:Src/stm32l0xx_it.c **** */
  55:Src/stm32l0xx_it.c **** void NMI_Handler(void)
  56:Src/stm32l0xx_it.c **** {
  26              		.loc 1 56 0
  27              		.cfi_startproc
  57:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  58:Src/stm32l0xx_it.c **** 
  59:Src/stm32l0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  60:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  61:Src/stm32l0xx_it.c **** 
  62:Src/stm32l0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  63:Src/stm32l0xx_it.c **** }
  28              		.loc 1 63 0
  29              		@ sp needed
  30 0000 7047     		bx	lr
  31              		.cfi_endproc
  32              	.LFE36:
  34 0002 C046     		.section	.text.HardFault_Handler,"ax",%progbits
  35              		.align	2
  36              		.global	HardFault_Handler
  37              		.code	16
  38              		.thumb_func
  40              	HardFault_Handler:
  41              	.LFB37:
  64:Src/stm32l0xx_it.c **** 
  65:Src/stm32l0xx_it.c **** /**
  66:Src/stm32l0xx_it.c **** * @brief This function handles Hard fault interrupt.
  67:Src/stm32l0xx_it.c **** */
  68:Src/stm32l0xx_it.c **** void HardFault_Handler(void)
  69:Src/stm32l0xx_it.c **** {
  42              		.loc 1 69 0
  43              		.cfi_startproc
  44              	.L3:
  70:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  71:Src/stm32l0xx_it.c **** 
  72:Src/stm32l0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  73:Src/stm32l0xx_it.c ****   while (1)
ARM GAS  /tmp/ccY66mG1.s 			page 3


  74:Src/stm32l0xx_it.c ****   {
  75:Src/stm32l0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  76:Src/stm32l0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  77:Src/stm32l0xx_it.c ****   }
  45              		.loc 1 77 0 discriminator 1
  46 0000 FEE7     		b	.L3
  47              		.cfi_endproc
  48              	.LFE37:
  50 0002 C046     		.section	.text.SVC_Handler,"ax",%progbits
  51              		.align	2
  52              		.global	SVC_Handler
  53              		.code	16
  54              		.thumb_func
  56              	SVC_Handler:
  57              	.LFB38:
  78:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  79:Src/stm32l0xx_it.c **** 
  80:Src/stm32l0xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  81:Src/stm32l0xx_it.c **** }
  82:Src/stm32l0xx_it.c **** 
  83:Src/stm32l0xx_it.c **** /**
  84:Src/stm32l0xx_it.c **** * @brief This function handles System service call via SWI instruction.
  85:Src/stm32l0xx_it.c **** */
  86:Src/stm32l0xx_it.c **** void SVC_Handler(void)
  87:Src/stm32l0xx_it.c **** {
  58              		.loc 1 87 0
  59              		.cfi_startproc
  88:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
  89:Src/stm32l0xx_it.c **** 
  90:Src/stm32l0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
  91:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
  92:Src/stm32l0xx_it.c **** 
  93:Src/stm32l0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
  94:Src/stm32l0xx_it.c **** }
  60              		.loc 1 94 0
  61              		@ sp needed
  62 0000 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE38:
  66 0002 C046     		.section	.text.PendSV_Handler,"ax",%progbits
  67              		.align	2
  68              		.global	PendSV_Handler
  69              		.code	16
  70              		.thumb_func
  72              	PendSV_Handler:
  73              	.LFB39:
  95:Src/stm32l0xx_it.c **** 
  96:Src/stm32l0xx_it.c **** /**
  97:Src/stm32l0xx_it.c **** * @brief This function handles Pendable request for system service.
  98:Src/stm32l0xx_it.c **** */
  99:Src/stm32l0xx_it.c **** void PendSV_Handler(void)
 100:Src/stm32l0xx_it.c **** {
  74              		.loc 1 100 0
  75              		.cfi_startproc
 101:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 102:Src/stm32l0xx_it.c **** 
 103:Src/stm32l0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
ARM GAS  /tmp/ccY66mG1.s 			page 4


 104:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 105:Src/stm32l0xx_it.c **** 
 106:Src/stm32l0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 107:Src/stm32l0xx_it.c **** }
  76              		.loc 1 107 0
  77              		@ sp needed
  78 0000 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE39:
  82 0002 C046     		.section	.text.SysTick_Handler,"ax",%progbits
  83              		.align	2
  84              		.global	SysTick_Handler
  85              		.code	16
  86              		.thumb_func
  88              	SysTick_Handler:
  89              	.LFB40:
 108:Src/stm32l0xx_it.c **** 
 109:Src/stm32l0xx_it.c **** /**
 110:Src/stm32l0xx_it.c **** * @brief This function handles System tick timer.
 111:Src/stm32l0xx_it.c **** */
 112:Src/stm32l0xx_it.c **** void SysTick_Handler(void)
 113:Src/stm32l0xx_it.c **** {
  90              		.loc 1 113 0
  91              		.cfi_startproc
  92 0000 08B5     		push	{r3, lr}
  93              	.LCFI0:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 3, -8
  96              		.cfi_offset 14, -4
 114:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 115:Src/stm32l0xx_it.c **** 
 116:Src/stm32l0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 117:Src/stm32l0xx_it.c ****   HAL_IncTick();
  97              		.loc 1 117 0
  98 0002 FFF7FEFF 		bl	HAL_IncTick
  99              	.LVL0:
 118:Src/stm32l0xx_it.c ****   HAL_SYSTICK_IRQHandler();
 100              		.loc 1 118 0
 101 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 102              	.LVL1:
 119:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 120:Src/stm32l0xx_it.c **** 
 121:Src/stm32l0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 122:Src/stm32l0xx_it.c **** }
 103              		.loc 1 122 0
 104              		@ sp needed
 105 000a 08BD     		pop	{r3, pc}
 106              		.cfi_endproc
 107              	.LFE40:
 109              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 110              		.align	2
 111              		.global	TIM2_IRQHandler
 112              		.code	16
 113              		.thumb_func
 115              	TIM2_IRQHandler:
 116              	.LFB41:
 123:Src/stm32l0xx_it.c **** 
ARM GAS  /tmp/ccY66mG1.s 			page 5


 124:Src/stm32l0xx_it.c **** /******************************************************************************/
 125:Src/stm32l0xx_it.c **** /* STM32L0xx Peripheral Interrupt Handlers                                    */
 126:Src/stm32l0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 127:Src/stm32l0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 128:Src/stm32l0xx_it.c **** /* please refer to the startup file (startup_stm32l0xx.s).                    */
 129:Src/stm32l0xx_it.c **** /******************************************************************************/
 130:Src/stm32l0xx_it.c **** 
 131:Src/stm32l0xx_it.c **** /**
 132:Src/stm32l0xx_it.c **** * @brief This function handles TIM2 global interrupt.
 133:Src/stm32l0xx_it.c **** */
 134:Src/stm32l0xx_it.c **** void TIM2_IRQHandler(void)
 135:Src/stm32l0xx_it.c **** {
 117              		.loc 1 135 0
 118              		.cfi_startproc
 119 0000 08B5     		push	{r3, lr}
 120              	.LCFI1:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 3, -8
 123              		.cfi_offset 14, -4
 136:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 137:Src/stm32l0xx_it.c **** 
 138:Src/stm32l0xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 139:Src/stm32l0xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 124              		.loc 1 139 0
 125 0002 0248     		ldr	r0, .L8
 126 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 127              	.LVL2:
 140:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 141:Src/stm32l0xx_it.c **** 
 142:Src/stm32l0xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 143:Src/stm32l0xx_it.c **** }
 128              		.loc 1 143 0
 129              		@ sp needed
 130 0008 08BD     		pop	{r3, pc}
 131              	.L9:
 132 000a C046     		.align	2
 133              	.L8:
 134 000c 00000000 		.word	htim2
 135              		.cfi_endproc
 136              	.LFE41:
 138              		.section	.text.TIM6_IRQHandler,"ax",%progbits
 139              		.align	2
 140              		.global	TIM6_IRQHandler
 141              		.code	16
 142              		.thumb_func
 144              	TIM6_IRQHandler:
 145              	.LFB42:
 144:Src/stm32l0xx_it.c **** 
 145:Src/stm32l0xx_it.c **** /**
 146:Src/stm32l0xx_it.c **** * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
 147:Src/stm32l0xx_it.c **** */
 148:Src/stm32l0xx_it.c **** void TIM6_DAC_IRQHandler(void)
 149:Src/stm32l0xx_it.c **** {
 146              		.loc 1 149 0
 147              		.cfi_startproc
 148 0000 08B5     		push	{r3, lr}
 149              	.LCFI2:
ARM GAS  /tmp/ccY66mG1.s 			page 6


 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 3, -8
 152              		.cfi_offset 14, -4
 150:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
 151:Src/stm32l0xx_it.c **** 
 152:Src/stm32l0xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 0 */
 153:Src/stm32l0xx_it.c ****   HAL_TIM_IRQHandler(&htim6);
 153              		.loc 1 153 0
 154 0002 0248     		ldr	r0, .L11
 155 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 156              	.LVL3:
 154:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
 155:Src/stm32l0xx_it.c **** 
 156:Src/stm32l0xx_it.c ****   /* USER CODE END TIM6_DAC_IRQn 1 */
 157:Src/stm32l0xx_it.c **** }
 157              		.loc 1 157 0
 158              		@ sp needed
 159 0008 08BD     		pop	{r3, pc}
 160              	.L12:
 161 000a C046     		.align	2
 162              	.L11:
 163 000c 00000000 		.word	htim6
 164              		.cfi_endproc
 165              	.LFE42:
 167              		.section	.text.TIM21_IRQHandler,"ax",%progbits
 168              		.align	2
 169              		.global	TIM21_IRQHandler
 170              		.code	16
 171              		.thumb_func
 173              	TIM21_IRQHandler:
 174              	.LFB43:
 158:Src/stm32l0xx_it.c **** 
 159:Src/stm32l0xx_it.c **** /**
 160:Src/stm32l0xx_it.c **** * @brief This function handles TIM21 global interrupt.
 161:Src/stm32l0xx_it.c **** */
 162:Src/stm32l0xx_it.c **** void TIM21_IRQHandler(void)
 163:Src/stm32l0xx_it.c **** {
 175              		.loc 1 163 0
 176              		.cfi_startproc
 177 0000 08B5     		push	{r3, lr}
 178              	.LCFI3:
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 3, -8
 181              		.cfi_offset 14, -4
 164:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM21_IRQn 0 */
 165:Src/stm32l0xx_it.c **** 
 166:Src/stm32l0xx_it.c ****   /* USER CODE END TIM21_IRQn 0 */
 167:Src/stm32l0xx_it.c ****   HAL_TIM_IRQHandler(&htim21);
 182              		.loc 1 167 0
 183 0002 0248     		ldr	r0, .L14
 184 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 185              	.LVL4:
 168:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN TIM21_IRQn 1 */
 169:Src/stm32l0xx_it.c **** 
 170:Src/stm32l0xx_it.c ****   /* USER CODE END TIM21_IRQn 1 */
 171:Src/stm32l0xx_it.c **** }
 186              		.loc 1 171 0
ARM GAS  /tmp/ccY66mG1.s 			page 7


 187              		@ sp needed
 188 0008 08BD     		pop	{r3, pc}
 189              	.L15:
 190 000a C046     		.align	2
 191              	.L14:
 192 000c 00000000 		.word	htim21
 193              		.cfi_endproc
 194              	.LFE43:
 196              		.section	.text.USART1_IRQHandler,"ax",%progbits
 197              		.align	2
 198              		.global	USART1_IRQHandler
 199              		.code	16
 200              		.thumb_func
 202              	USART1_IRQHandler:
 203              	.LFB44:
 172:Src/stm32l0xx_it.c **** 
 173:Src/stm32l0xx_it.c **** /**
 174:Src/stm32l0xx_it.c **** * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line
 175:Src/stm32l0xx_it.c **** */
 176:Src/stm32l0xx_it.c **** void USART1_IRQHandler(void)
 177:Src/stm32l0xx_it.c **** {
 204              		.loc 1 177 0
 205              		.cfi_startproc
 206 0000 08B5     		push	{r3, lr}
 207              	.LCFI4:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 178:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 179:Src/stm32l0xx_it.c **** 
 180:Src/stm32l0xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 181:Src/stm32l0xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 211              		.loc 1 181 0
 212 0002 0248     		ldr	r0, .L17
 213 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 214              	.LVL5:
 182:Src/stm32l0xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 183:Src/stm32l0xx_it.c **** 
 184:Src/stm32l0xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 185:Src/stm32l0xx_it.c **** }
 215              		.loc 1 185 0
 216              		@ sp needed
 217 0008 08BD     		pop	{r3, pc}
 218              	.L18:
 219 000a C046     		.align	2
 220              	.L17:
 221 000c 00000000 		.word	huart1
 222              		.cfi_endproc
 223              	.LFE44:
 225              		.text
 226              	.Letext0:
 227              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 228              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 229              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l051xx.h"
 230              		.file 5 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 231              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 232              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim.h"
ARM GAS  /tmp/ccY66mG1.s 			page 8


 233              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 234              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 235              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
ARM GAS  /tmp/ccY66mG1.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_it.c
     /tmp/ccY66mG1.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccY66mG1.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccY66mG1.s:35     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccY66mG1.s:40     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccY66mG1.s:51     .text.SVC_Handler:0000000000000000 $t
     /tmp/ccY66mG1.s:56     .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccY66mG1.s:67     .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccY66mG1.s:72     .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccY66mG1.s:83     .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccY66mG1.s:88     .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccY66mG1.s:110    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccY66mG1.s:115    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccY66mG1.s:134    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccY66mG1.s:139    .text.TIM6_IRQHandler:0000000000000000 $t
     /tmp/ccY66mG1.s:144    .text.TIM6_IRQHandler:0000000000000000 TIM6_IRQHandler
     /tmp/ccY66mG1.s:163    .text.TIM6_IRQHandler:000000000000000c $d
     /tmp/ccY66mG1.s:168    .text.TIM21_IRQHandler:0000000000000000 $t
     /tmp/ccY66mG1.s:173    .text.TIM21_IRQHandler:0000000000000000 TIM21_IRQHandler
     /tmp/ccY66mG1.s:192    .text.TIM21_IRQHandler:000000000000000c $d
     /tmp/ccY66mG1.s:197    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccY66mG1.s:202    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccY66mG1.s:221    .text.USART1_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_TIM_IRQHandler
htim2
htim6
htim21
HAL_UART_IRQHandler
huart1
